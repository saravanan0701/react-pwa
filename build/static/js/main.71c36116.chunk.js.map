{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","useState","toggle","handleToggle","toggle1","handleToggle1","installPrompt","setInstallPrompt","useEffect","console","log","window","addEventListener","e","preventDefault","matchMedia","matches","navigator","standalone","installApp","a","prompt","userChoice","outcome","className","onClick","src","logo","alt","href","target","rel","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"yGAAAA,EAAOC,QAAU,IAA0B,kC,8MC4E5BC,MAtEf,WAAgB,IAAD,EAEqBC,oBAAS,GAF9B,mBAELC,EAFK,KAEIC,EAFJ,OAGuBF,oBAAS,GAHhC,mBAGLG,EAHK,KAGKC,EAHL,OAI8BJ,mBAAS,MAJvC,mBAINK,EAJM,KAIUC,EAJV,KAMbC,oBAAW,WACTC,QAAQC,IAAI,gCACZC,OAAOC,iBAAiB,sBAAsB,SAAAC,GAO5C,GALAA,EAAEC,iBACFL,QAAQC,IAAI,wBACZH,EAAiBM,GACjBJ,QAAQC,IAAIG,GAERF,OAAOI,YAAcJ,OAAOI,WAAW,8BAA8BC,UAA4C,IAAhCL,OAAOM,UAAUC,WACpG,OAAO,EAGTf,GAAa,MAKf,IAEF,IAAMgB,EAAU,sCAAG,sBAAAC,EAAA,wDACbd,EADa,0CACS,GADT,cAEjBH,GAAa,GACbE,GAAc,GACdC,EAAce,SAJG,SAKGf,EAAcgB,WALjB,OAMM,aANN,OAMNC,QACTd,QAAQC,IAAI,iBAGZD,QAAQC,IAAI,qBAGdH,EAAiB,MAbA,0CAAH,qDAkBhB,OACE,yBAAKiB,UAAU,OACb,4BAAQA,UAAU,cAEdtB,GAAUE,EACV,4BAAQqB,QAASN,EAAYK,UAAU,cAAvC,SAEA,KAEF,yBAAKE,IAAKC,IAAMH,UAAU,WAAWI,IAAI,SACzC,mCACO,4CADP,wBAGA,uBACEJ,UAAU,WACVK,KAAK,sBACLC,OAAO,SACPC,IAAI,uBAJN,kBCnDFC,EAAcC,QACW,cAA7BtB,OAAOuB,SAASC,UAEe,UAA7BxB,OAAOuB,SAASC,UAEhBxB,OAAOuB,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BtB,UAAUuB,cACPC,SAASH,GACTI,KAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACf/B,UAAUuB,cAAcS,YAI1BxC,QAAQC,IACN,iHAKE6B,GAAUA,EAAOW,UACnBX,EAAOW,SAASP,KAMlBlC,QAAQC,IAAI,sCAGR6B,GAAUA,EAAOY,WACnBZ,EAAOY,UAAUR,UAO5BS,MAAM,SAAAC,GACL5C,QAAQ4C,MAAM,4CAA6CA,KC1FjEC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDgB1C,SAAkBlB,GACvB,GAA6C,kBAAmBtB,UAAW,CAGzE,GADkB,IAAIyC,IAAIC,GAAwBhD,OAAOuB,SAASL,MACpD+B,SAAWjD,OAAOuB,SAAS0B,OAIvC,OAGFjD,OAAOC,iBAAiB,OAAQ,WAC9B,IAAM0B,EAAK,UAAMqB,GAAN,sBAEP3B,IAgEV,SAAiCM,EAAOC,GAEtCsB,MAAMvB,GACHI,KAAK,SAAAoB,GAEJ,IAAMC,EAAcD,EAASE,QAAQC,IAAI,gBAEnB,MAApBH,EAASI,QACO,MAAfH,IAA8D,IAAvCA,EAAYI,QAAQ,cAG5ClD,UAAUuB,cAAc4B,MAAM1B,KAAK,SAAAC,GACjCA,EAAa0B,aAAa3B,KAAK,WAC7B/B,OAAOuB,SAASoC,aAKpBjC,EAAgBC,EAAOC,KAG1Ba,MAAM,WACL3C,QAAQC,IACN,mEArFA6D,CAAwBjC,EAAOC,GAI/BtB,UAAUuB,cAAc4B,MAAM1B,KAAK,WACjCjC,QAAQC,IACN,gHAMJ2B,EAAgBC,EAAOC,MCvC/BC,K","file":"static/js/main.71c36116.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","import React from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport { useState, useEffect } from 'react';\r\n\r\n\r\nfunction App() {\r\n\r\n  const [ toggle , handleToggle ] = useState(false);\r\n  const [ toggle1 , handleToggle1 ] = useState(true);\r\n  const [installPrompt , setInstallPrompt] = useState(null);\r\n\r\n  useEffect( () => {\r\n    console.log(\"Listening for Install prompt\");\r\n    window.addEventListener('beforeinstallprompt',e=>{\r\n      // For older browsers\r\n      e.preventDefault();\r\n      console.log(\"Install Prompt fired\");\r\n      setInstallPrompt(e);\r\n      console.log(e);\r\n      // See if the app is already installed, in that case, do nothing\r\n      if((window.matchMedia && window.matchMedia('(display-mode: standalone)').matches) || window.navigator.standalone === true){\r\n        return false;\r\n      }\r\n      \r\n      handleToggle(true);\r\n                  \r\n      // Set the state variable to make button visible\r\n    })\r\n    \r\n  },[]);\r\n\r\n  const installApp = async() => {\r\n    if(!installPrompt) return false;\r\n    handleToggle(false);\r\n    handleToggle1(false);\r\n    installPrompt.prompt();\r\n    let outcome = await installPrompt.userChoice;    \r\n    if(outcome.outcome === 'accepted'){\r\n      console.log(\"App Installed\")\r\n    }\r\n    else{\r\n      console.log(\"App not installed\");\r\n    }\r\n    // Remove the event reference\r\n    setInstallPrompt(null);\r\n    // Hide the button\r\n    \r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        {\r\n          toggle && toggle1 ?\r\n          <button onClick={installApp} className=\"add-button\">Saran</button> \r\n          :\r\n          null\r\n        }        \r\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n        <p>\r\n          Edit <code>src/App.js</code> and save to reload.\r\n        </p>\r\n        <a\r\n          className=\"App-link\"\r\n          href=\"https://reactjs.org\"\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          Learn React\r\n        </a>\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n"],"sourceRoot":""}